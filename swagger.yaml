swagger: '2.0'
info:
  version: '1.0'
  title: 'TaskManagement'
  description: "Task Management è un servizio che permette la gestione e 
l'assegnamento di esami (ovvero gruppi di esercizi) a studenti. Questi 
unltimi dovranno completare gli esercizi. Dopo una deadline definita dal 
T.A. che ha creato l'esame, gli stuenti riceveranno esercizi svolti da 
altri studenti che dovranno correggere. Infine il T.A. darà un voto per 
ogni esercizio e per l'esame ad ogni studente."

host: task-management-solo-numeri-0.herokuapp.com

basePath: /v1
schemes: 
 - https
consumes: 
 - application/json
produces: 
 - application/json
paths:

  /users:
    get:
      summary: "Return a list of users"
      description: "Return a JSON with the list of all the users." 
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/userList"
        404:
          description: Not found.
    post:
      summary: "Create new user."
      description: "Creation of a new user."
      parameters:
        - in: body
          name: user
          description: The user to create.
          schema:
            $ref: "#/definitions/user"
      responses:
        201:
          description: Resource created.
          schema:
            $ref: "#/definitions/userBody"
        400:
          description: Bad request.
        503:
          description: Service unavailable.

  /users/login:
    post:
      parameters:
        - in: body
          name: login
          required: true
          description: user's credentials
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
      summary: login an user with email and password
      description: login an user with email and password
      responses:
        200:
          description: user logged in
        400:
          description: bad request
          
  /users/{id}:
    get:
      parameters: 
        - in: path
          name: id
          required: true
          type: integer
          minimum: 1
          description: The user ID.
      summary: "Get the information of a specific user by id."
      description: "It returns a JSON with all the properties of the user."
      responses:
        200:
          description: User found.
          schema:
            $ref: "#/definitions/user"
        400:
          description: User not found.
    put:
      parameters: 
        - in: path
          name: id
          required: true
          type: integer
          description: the user ID
        - in: body
          name: user
          required: true
          description: The user to be modified.
          schema:
            $ref: "#/definitions/user"
      summary: "Update an user by id."
      description: "It updates the properties of the user."
      responses:
        204:
          description: User updated successfully.
        409: 
          description: Conflict. Can't update.
    delete:
      parameters: 
        - in: path
          name: id
          required: true
          type: integer
          minimum: 1
          description: The user ID.
      summary: "Delete an user." 
      description: "It deletes an user by id."
      responses:
        204:
          description: User successfully deleted.
        404:
          description: Not found.
          
  /users/{id}/tasks:
    get:
      parameters: 
        - in: path
          name: id
          required: true
          type: integer
          minimum: 1
          description: "The user ID."
      summary: "The list of the tasks created by the user" 
      description: "It returns the list of the tasks created by a specific user"
      responses:
        200:
          description: "Returning the list of all tasks created by the user"
          schema:
            $ref: "#/definitions/tasksList"
        404:
          description: "Invalid user ID. Bad request."
          
  /users/{id}/exams:
    get:
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: "The user ID."
      summary: "It retuns the list of the exams created and assigned"
      description: "It retuns the list of the exams created and assigned"
      responses:
        200:
          description: "List found"
          schema:
            $ref: "#/definitions/examsList"
        404:
          description: list not found.

  /users/{id}/submissions:
    get:
      parameters: 
        - in: path
          name: id
          required: true
          type: integer
          minimum: 1
          description: The user ID.
      summary: "Returns user's submission." 
      description: "Returns the submissions made by the specified user." 
      responses:
        200:
          description: "List found"
          schema:
            $ref: "#/definitions/submissionsList"
        404:
          description: Invalid user ID. Bad request.
          
  /users/{id}/reviews:
    get:
      parameters: 
        - in: path
          name: id
          required: true
          type: integer
          minimum: 1
          description: The user ID.
      summary: "Return all user's reviews" 
      description: "Return all user's reviews." 
      responses:
        200:
          description: Ok
        400:
          description: Invalid user ID. Bad request.
    
  /exams:
    post:
      summary: "Create a new exam"
      description: "Create a new exam as a group of tasks."
      parameters:
        - in: body
          name: exam
          schema:
            $ref: "#/definitions/exam"

      responses:
        201:
          description: Resource created.
          schema:
            $ref: "#/definitions/examBody"
        400:
          description: Bad request.
        503:
          description: Service unavailable.
          
  /exams/{id}:
    get:
      parameters: 
        - in: path
          name: id
          required: true
          type: integer
          description: "The exam ID."
      summary: "Get infos about a specific exam"
      description: "Returns the exam {id}"
      responses:
        200:
          description: "ID found."
          schema:
            $ref: "#/definitions/exam"
        404:
          description: "ID not found."
    put:
      parameters: 
        - in: path
          name: id
          required: true
          type: integer
          description: "The exam's ID."
        - in: body
          name: exam
          required: true
          description: the user to be modified
          schema:
            $ref: "#/definitions/exam"
      summary: "Update exam infos"
      description: "Update exam informations: title and tasks list." 
      responses:
        200:
          description: "ID found, exam updated."
        400:
          description: "Invalid exam ID."
    delete:
      parameters: 
        - in: path
          name: id
          required: true
          type: integer
          minimum: 1
          description: The user ID.
      summary: "Delete exam"
      description: "Delete specified exam"
      responses:
        204:
          description: ID found, exam deleted.
        404:
          description: ID not found.
          
  /exams/{id}/tasks:
    get:
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: "The exam's ID."
      summary: "Returns all the tasks of the exam."
      description: "Gets all the tasks that are in the exam specified by the ID."
      responses:
        200:
          description: "List found."
          schema:
            $ref: "#/definitions/tasksList"
        404:
          description: "ID not found."

  /tasks:
    post:
      summary: "Create a new task"
      description: "Create a new task"
      parameters:
        - in: body
          name: task
          schema:
            $ref: "#/definitions/task"
      responses:
        201:
          description: Resource created.
          schema:
            $ref: "#/definitions/taskBody"
        400:
          description: Bad request.
        503:
          description: Service unavailable.
          
  /classes:
    post:
      summary: "Create a new class"
      description: "Create a new class as a group of users."
      parameters:
        - in: body
          name: exam
          schema:
            $ref: "#/definitions/class"

      responses:
        201:
          description: Resource created.
          schema:
            $ref: "#/definitions/classBody"
        400:
          description: Bad request.
        503:
          description: Service unavailable.
    
  /classes/{id}:
    get:
      parameters: 
        - in: path
          name: id
          required: true
          type: integer
          description: "The class ID."
      summary: "Get infos about a specific class"
      description: "Returns the class {id}"
      responses:
        200:
          description: "ID found."
          schema:
            $ref: "#/definitions/class"
        404:
          description: "ID not found."
    put:
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: "The class ID."
        - in: body
          name: classes
          required: true
          schema:
            $ref: "#/definitions/class"
          description: "The class to be modified."
      summary: "Update class information"
      description: "Update the classes/{id} parameters"
      responses:
        200:
          description: "ID found, class updated."
        400:
          description: "Invalid class ID."
  /reviews/{id}:
    put:
      parameters: 
        - in: path
          name: id
          required: true
          type: integer
          description: "The review's ID."
        - in: body
          name: review
          required: true
          description: the review to be modified (created)
          schema:
            $ref: "#/definitions/review"
      summary: "Update (create) reviews information"
      description: "Reviews are created by the system. User updates an empty review to reply to a submission."
      responses:
        200:
          description: "ID found, review created."
        400:
          description: "Invalid review ID."
          
  /submissions:
    post:
      parameters:
        - in: body
          name: submission
          schema:
            $ref: "#/definitions/submission"
      responses:
        201:
          description: new submission created.
          schema:
            $ref: "#/definitions/submissionBody"
        400:
          description: Bad request.
        503:
          description: Service unavailable.
  
definitions:
  user:
    type: object
    properties:
      id:
        type: integer
      body:
        $ref: "#/definitions/userBody"

  
  task:
    type: object
    properties:
      id:
        type: integer
      body:
        $ref: "#/definitions/taskBody"
      
  exam:
    type: object
    properties:
      id:
        type: integer
      body:
        $ref: "#/definitions/examBody"

  class:
    type: object
    properties:
      id:
        type: integer
      body:
        $ref: "#/definitions/classBody"

  review:
    type: object
    properties:
      id:
        type: integer
      body:
        $ref: "#/definitions/reviewBody"

  submission:
    type: object
    properties:
      id:
        type: integer
      body:
        $ref: "#/definitions/submissionBody"
      
  
  userList:
    type: array
    items:
      $ref: "#/definitions/user"

  tasksList:
    type: array
    items:
      $ref: "#/definitions/task"

  examsList:
    type: array
    items:
      $ref: "#/definitions/exam"

  submissionsList:
    type: array
    items:
      $ref: "#/definitions/submission"

  userBody:
    type: object
    properties:
      name:
        type: string
      surname:
        type: string
      email:
        type: string
      password:
        type: string

  taskBody:
    type: object
    properties:
      creator:
        type: integer
      task-type:
        type: integer
      question:
        type: string
      answer-example:
        type: string
      mark:
        type: integer

  examBody:
    type: object
    properties:
      creator:
        type: integer
      deadline:
        type: integer
      exam-mark:
        type: integer
      task-list:
        type: array
        items:
          $ref: "#/definitions/task"

  classBody:
    type: object
    properties:
      name:
        type: string
      prof:
        type: integer
      description:
        type: string
      assistants:
        type: array
        items: 
          $ref: "#/definitions/user"
      students:
        type: array
        items:
          $ref: "#/definitions/user"

  reviewBody:
    type: object
    properties:
      reviewer:
        type: integer
      submission:
        type: integer
      review-answer:
        type: string
      deadline:
        type: integer

  submissionBody:
    type: object
    properties:
      user:
        type: integer
      task:
        type: integer
      exam:
        type: integer
      answer:
        type: string
      final-mark:
        type: integer